library(Rcmdr)
library(MASS)
q()
acs <- read.csv(url("http://stat511.cwick.co.nz/homeworks/acs_or.csv"))
acs <- read.csv(url("http://stat511.cwick.co.nz/homeworks/acs_or.csv"))
acs <- read.csv(url("http://stat511.cwick.co.nz/homeworks/acs_or.csv"))
setInternet2(use=FALSE)
acs <- read.csv(url("http://stat511.cwick.co.nz/homeworks/acs_or.csv"))
ls()
view(acs)
View(acs)
acs[1,3]
a=subset(acs, age_husband > age_wife)
dim(acs)
dim(a)
head(acs)
mean(age_wife)
mean(acs$age_wife)
median(acs$age_wife)
var(acs$age_wife)
quantile(acs$age_wife)
sd(acs$age_wife)
summary()
summary
summary(acs)
s=acs[1:100,]
plot(s$age_husband, s$age_wife,type='p')
hist(s$age_wife)
plot(s$age_husband, s$age_wife,type='l')
plot(s$age_husband, s$age_wife,type='p')
barplot(acs$bedrooms)
counts=table(acs$bedrooms)
barplot(counts)
?table
install.packages("kintr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("rmarkdown")
library(rmarkdown)
install.packages(c("ggplots","lattice"))
library(ggplots)
install.packages("ggplot2")
install.packages("rproj")
install.packages("rprljroot")
getOption("repos")
install.packages("https://cran.r-project.org/src/contrib/rprojroot_1.2.tar.gz",repos=NULL,method="libcurl")
install.packages("https://cran.r-project.org/src/contrib/rprojroot_1.2.tar.gz",repos=NULL,method="curl")
install.packages("http://cran.r-project.org/src/contrib/rprojroot_1.2.tar.gz",repos=NULL)
install.packages("https://cran.r-project.org/src/contrib/rprojroot_1.2.tar.gz",repos=NULL)
install.packages("https://cran.r-project.org/src/contrib/rprojroot_1.2.tar.gz",repos=NULL,method="wget")
install.packages("installr")
library(installr)
updateR()
setInternet2(TRUE)
updateR()
require(installr)
updateR()
R
updateR()
tmp<-c(1:5)
tmp
which(R)
install.R()
setInternet2(TRUE)
install.R()
sessionInfo()
install.R()
setInternet2(TRUE)
setInternet2(TRUE)
install.R()
updateR(install_R=TRUE)
R.home()
list.files(R.home())
R.home()
install.packages("rcmdr")
ls()
pwd()
getwd()
library(knitr)
library(rmarkdown)
install.packages("pdflatex")
x < 1:10
x <- 1:10
y <- 5:15
plot(x,y)
y
y <- 6:15
plot(x,y)
library(ggplot2)
help("ggplot2")
ggplot(mpg, aes(displ,hwy, color=class)) +
geom_point()
library(tidyverse)
install.packages(tidyverse)
help("ggplot2")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
ggpot(mpg, aes(displ, hwy, size=class))
ggplot(mpg, aes(displ, hwy, size=class))
ggplot(mpg, aes(displ, hwy, size=class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, size=class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape=class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, alpha=class)) +
geom_point()
ggplot(mpg, aes(displ, hwy, color="blue")) +
geom_point()
ggplot(mpg)+ geom_point(mapping=aes(displ, hwy),color="blue")
ggplot(mpg)+ geom_point(mapping=aes(displ, hwy),color=class)
ggplot(mpg)+ geom_point(mapping=aes(displ, hwy,color=class))
boxplot(iris$Petal.Length~iris$Species)
iris
head(iris)
head(mtcars)
attach(mtcar)
attach(mtcars)
hist(wt)
hist(wt,breaks=5,main="Histogram of Weight in Tons",xlab="Weight (tons)", col="blue")
hist(wt)
hist(wt,breaks=5,main="Histogram of Weight in Tons",xlab="Weight (tons)", col="blue")
plot(rnorm(100),rnorm(100))
library(lme4)
politeness=read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
summary(politeness)
head(politeness)
str(politeness)
colnames(politeness)
which(is.na(politeness$frequency))
tail(politeness)
politeness.model = lmer(frequency ~ attitude +
(1|subject) + (1|scenario), data=politeness)
summary(politeness.model)
anova?
;
?anova
?mixed
mixed()
install.packages("lsmeans")
lsmeans
summary(politeness)
boxplot(frequency ~ attitude*gender, col=c("white","lightgray"),politeness)
boxplot(frequency ~ attitude:gender, col=c("white","lightgray"),politeness)
boxplot(frequency ~ attitude+gender, col=c("white","lightgray"),politeness)
summary(politeness)
hist(frequency ~ attitude+gender, col=c("white","lightgray"),politeness)
politeness.model=lmer(frequency ~ attitude +(1|subject)+(1|scenario),politeness)
summary(politeness.model)
ls()
head(politeness)
tail(politeness)
data(coronary)
install.packages('coronary')
library(bnlearn)
install.packages('bnlearn')
library('bnlearn')
data(coronary)
bndf=data.frame(coronary)
res=hc(bndf)
plot(res)
summary(res)
res$arcs
res$arcs=res$arcs[-which((res$arcs[,'from']=="M..Work",res$arcs[,'to']=="Family")),]
res$arcs=res$arcs[-which((res$arcs[,'from']=="M..Work" & res$arcs[,'to']=="Family")),]
plot(res)
fittedbn=bn.fit(res,data=bndf)
fittedbn
head
head(fittedbn)
print(fittedbn$Proteins)
cpquery(fittedbn,event=(Proteins=="<3"),evidence = (Smoking=="no" & Pressure=='>140'))
library(ROCR)
library(pROC)
install.packages(c("ROCR","pROC"))
library(sqldf)
library(gmodels)
library(caret)
install.packages(c("sqldf","gmodels","caret"))
datos <- read.table(file = "http://research.fhcrc.org/content/dam/stripe/diagnostic-biomarkers-statistical-center/files/psa2b.csv",
sep = ",",
header = TRUE)
?str()
str(datos)
datos.originales <- datos
datos <- sqldf("select id, d, min(t), fpsa, tpsa, age from 'datos.originales'
group by id")
install.packages("sqldf")
datos <- sqldf("select id, d, min(t), fpsa, tpsa, age from 'datos.originales'
group by id")
library(sqldf)
install.packages("RSQLite")
install.packages("RSQLite", dependencies = TRUE, repos = "http://cran.es.r-project.org/")
install.packages("RSQLite", dependencies = TRUE, repos = "https://cran.r-project.org/src/contrib/RSQLite_2.1.0.tar.gz")
install.packages("RSQLite", dependencies = TRUE, url = "https://cran.r-project.org/src/contrib/RSQLite_2.1.0.tar.gz")
?install.packages
install.packages("RSQLite", dependencies = TRUE, repos = "https://cran.r-project.org/src/contrib/")
install.packages("RSQLite", dependencies = TRUE, repos = "https://cran.r-project.org/bin/windows/contrib/3.4/RSQLite_2.1.0.zip")
install.packages("RSQLite")
install.packages("RSQLite", dependencies = TRUE, repos = "https://github.com/r-dbi/RSQLite/")
devtools::install_github("rstats-db/RSQLite")
install.packages("devtools")
devtools::install_github("rstats-db/RSQLite")
devtools::install_github("rstats-db/RSQLite")
table(datos$d)
ls()
datos <- sqldf("select id, d, min(t), fpsa, tpsa, age from 'datos.originales'
group by id")
version
install.packages("Rccp")
install.packages("Rccp", dependencies = TRUE, repos = "https://cran.r-project.org/bin/windows/contrib/3.4/Rcpp_0.12.16.zip")
install.packages("Rccp", dependencies = TRUE, repos = "https://cran.r-project.org/src/contrib/Rcpp_0.12.16.tar.gz")
install.packages("RSQLite")
install.packages("RSQLite")
insertClassMethods("sqldf")
install.packages("sqldf")
library(sqldf)
datos <- sqldf("select id, d, min(t), fpsa, tpsa, age from 'datos.originales'
group by id")
datos$d
table
table(datos$d)
prf = caret::BoxCoxTrans(y =(datos$fpsa))
prf
datos$fpsatran <- predict(prf, datos$fpsa)
hist(datos$fpsatran)
prt = caret::BoxCoxTrans(y =(datos$tpsa))
datos$tpsatran <- predict(prt, datos$tpsa)
centerscale <- caret::preProcess(datos[,c(7,8)])
centerscale
datos2 <- cbind(datos,
predict(centerscale, datos[,c(7,8)])
)
names(datos2)[9] <- "fpsatip"
names(datos2)[10] <- "tpsatip"
d1 <- densityplot( ~ fpsatip,
data = datos2,
groups = d,
auto.key = TRUE)
library(lattice)
d1 <- densityplot( ~ fpsatip,
data = datos2,
groups = d,
auto.key = TRUE)
d2 <- densityplot( ~ tpsatip,
data = datos2,
groups = d,
auto.key = TRUE)
print(d1, position = c(0, .5, 1, 1), more = T)
print(d2, position = c(0, 0, 1, .5))
value <- 4
val.trans.1 <- predict(prt, value)
val.trans.2 <- (val.trans.1 - mean(datos2$tpsatran)) / sd(datos2$tpsatran)
val.trans.2
datos2$scree <- "b-test neg"
datos2$scree[datos$tpsa >= val.trans.2] <- "a-test pos"
datos2$cond <- "a-cond pos"
datos2$cond[datos$d == 0] <- "b-cond neg"
CrossTable(datos2$scree, datos2$cond,
prop.c = TRUE,
prop.chisq = FALSE,
prop.r = FALSE,
prop.t = FALSE)
library(gmodels)
CrossTable(datos2$scree, datos2$cond,
prop.c = TRUE,
prop.chisq = FALSE,
prop.r = FALSE,
prop.t = FALSE)
plot(c(0, 1), c(0, 1), type= "n", xlab = "FPR", ylab = "TPR")
FPR <- .029
TPR <- .465
points(FPR, TPR)
segments(0, 0, FPR, TPR)
segments(FPR, TPR, 1, 1)
pred.z.01 <- prediction(datos2$id, datos2$d)
# uso: performance(prediction_object, "tpr", "fpr") creates the object with performance metrics
# TPR: True Positive Ratio
# FPR: False Positive Ratio
perf.z.01 <- performance(pred.z.01, "tpr", "fpr")
plot.new()
plot(perf.z.01, col = "green")
abline(0, 1,
col = "grey")
auc.z.01 <- performance(pred.z.01, "auc")
legend("bottomright",
paste(round(as.numeric(auc.z.01@y.values), digits = 2)),
col = c("green"),
pch = c(3))
library(ROCR)
library(pROC)
library(gmodels)
library(sqldf)
library(caret)
pred.z.01 <- prediction(datos2$id, datos2$d)
# uso: performance(prediction_object, "tpr", "fpr") creates the object with performance metrics
# TPR: True Positive Ratio
# FPR: False Positive Ratio
perf.z.01 <- performance(pred.z.01, "tpr", "fpr")
plot.new()
plot(perf.z.01, col = "green")
abline(0, 1,
col = "grey")
auc.z.01 <- performance(pred.z.01, "auc")
legend("bottomright",
paste(round(as.numeric(auc.z.01@y.values), digits = 2)),
col = c("green"),
pch = c(3))
pROC::plot.roc(datos2$d, datos2$tpsa,
print.auc = TRUE)
install.packages("survival", "survminer")
library("survival")
library("survminer")
install.packages("survminer")
library("survminer")
data("lung")
head(lung)
res.cox <- coxph(Surv(time,status) ~ sex, lung)
res.cox
summary(res.cox)
n<-10
n
rnorm(n,mean=2)
x <- seq(0,50,1)
x
x <- seq(0,50,by=1)
x
dbinom(x,50,0.5)
plot(x,y)
y <- dbinom(x,50,0.5)
plot(x,y)
pdinom(26,50,0.5)
pbinom(26,50,0.5)
pbinom(26,51,0.5)
x <- qbinom(0.60,50,0.5)
print(x)
x <- qbinom(0.60,51,0.5)
print(x)
rbinom(8,150,0.4)
rbinom(8,150,0.01)
rbinom(8,150,0.8)
rbinom(8,150,0.8)
rbinom(8,150,0.8)
rbinom(8,150,0.95)
rbinom(8,150,0.95)
library(party)
install.packages("party")
head(readingSkills)
head(readingSkills)
library(party)
head(readingSkills)
input.dat <- readingSkills[c(1:150),]
output.tree <- ctree(nativeSpeaker ~ age + showSize + score,data=input.dat)
plot(output.tree)
input.dat <- readingSkills[c(1:150),]
output.tree <- ctree(nativeSpeaker ~ age + showSize + score,data=input.dat)
output.tree <- ctree(nativeSpeaker ~ age + shoeSize + score,data=input.dat)
plot(output.tree)
install.packages("randomForest")
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score, data = readingSkills)
library(randomForest)
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score, data = readingSkills)
print(output.forest)
print(significance(fit,type = 2))
print(importance(fit,type = 2))
print(importance(output.forest,type = 2))
library(survival)
plot(survfit(Surv(pbc$time,pbc$status ==2)~1))
library(MASS)
car.dat <- table(Cars93$AirBags,Cars93$Type)
chisq.test(car.dat)
install.packages("knitr")
install.packages("reshape2")
library(reshape2)
library(knitr)
library(sm)
install.packages("sm")
libary
library(vioplot)
library(Hmisc)
install.packages("vioplot")
library(vioplot)
setwd("C:/Users/guowc_000/JupyterNotebooks/Kaikai/FluPredict/data")
regionflu <- get_flu_data(region = "HHS", sub_region = 1:10, data_source = "ilinet", years = 2010:2018)
library(cdcfluview)
regionflu <- get_flu_data(region = "HHS", sub_region = 1:10, data_source = "ilinet", years = 2010:2018)
write.csv(regionflu,"regionflu_weekly_10_19.csv",row.names=FALSE)
image.save()
save.image()
q()
